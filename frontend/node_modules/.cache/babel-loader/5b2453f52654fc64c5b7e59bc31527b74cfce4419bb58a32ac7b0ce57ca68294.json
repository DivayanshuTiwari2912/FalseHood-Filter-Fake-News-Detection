{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5001/api';\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// API service functions\nconst apiService = {\n  // Health check\n  checkHealth: () => {\n    return apiClient.get('/health');\n  },\n  // Dataset operations\n  uploadDataset: formData => {\n    return apiClient.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  getDatasetInfo: () => {\n    return apiClient.get('/dataset');\n  },\n  // Model operations\n  getAvailableModels: () => {\n    return apiClient.get('/models');\n  },\n  trainModel: (modelName, epochs = 3, batchSize = 32) => {\n    return apiClient.post('/train', {\n      model: modelName,\n      epochs: epochs,\n      batch_size: batchSize\n    });\n  },\n  evaluateModel: modelName => {\n    return apiClient.post('/evaluate', {\n      model: modelName\n    });\n  },\n  // Prediction\n  analyzeText: (text, modelName = 'deberta') => {\n    return apiClient.post('/predict', {\n      text: text,\n      model: modelName\n    });\n  },\n  // Web scraping\n  scrapeWebsite: url => {\n    return apiClient.post('/scrape', {\n      url: url\n    });\n  },\n  // Generate shareable link\n  generateShareableLink: analysisResult => {\n    // Generate shareable URL with analysis result data\n    const baseUrl = window.location.origin;\n    const path = '/analyze';\n\n    // Create parameters for sharing\n    const params = new URLSearchParams();\n    if (analysisResult) {\n      params.append('result', JSON.stringify({\n        prediction: analysisResult.prediction,\n        confidence: analysisResult.confidence,\n        emoji: analysisResult.emoji,\n        emoji_description: analysisResult.emoji_description,\n        model: analysisResult.model\n      }));\n    }\n    return `${baseUrl}${path}?${params.toString()}`;\n  },\n  // Share to social media\n  shareToSocialMedia: (platform, analysisResult) => {\n    const shareableLink = apiService.generateShareableLink(analysisResult);\n    const shareText = `I analyzed this content with Falsehood Filter and found it to be ${analysisResult.prediction === 1 ? 'authentic' : 'false'} information (${analysisResult.emoji_description}) ${analysisResult.emoji}`;\n    let shareUrl = '';\n    switch (platform) {\n      case 'twitter':\n        shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareableLink)}`;\n        break;\n      case 'facebook':\n        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareableLink)}&quote=${encodeURIComponent(shareText)}`;\n        break;\n      case 'linkedin':\n        shareUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(shareableLink)}&title=${encodeURIComponent('Falsehood Filter Analysis')}&summary=${encodeURIComponent(shareText)}`;\n        break;\n      case 'whatsapp':\n        shareUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(`${shareText} ${shareableLink}`)}`;\n        break;\n      case 'email':\n        shareUrl = `mailto:?subject=${encodeURIComponent('Falsehood Filter Analysis')}&body=${encodeURIComponent(`${shareText}\\n\\nCheck it out here: ${shareableLink}`)}`;\n        break;\n      default:\n        return null;\n    }\n\n    // Open in a new window\n    if (shareUrl) {\n      window.open(shareUrl, '_blank', 'noopener,noreferrer');\n      return true;\n    }\n    return false;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","apiService","checkHealth","get","uploadDataset","formData","post","getDatasetInfo","getAvailableModels","trainModel","modelName","epochs","batchSize","model","batch_size","evaluateModel","analyzeText","text","scrapeWebsite","url","generateShareableLink","analysisResult","baseUrl","window","location","origin","path","params","URLSearchParams","append","JSON","stringify","prediction","confidence","emoji","emoji_description","toString","shareToSocialMedia","platform","shareableLink","shareText","shareUrl","encodeURIComponent","open"],"sources":["C:/Users/Divax/Downloads/FalseNewsDetector/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5001/api';\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// API service functions\nconst apiService = {\n  // Health check\n  checkHealth: () => {\n    return apiClient.get('/health');\n  },\n  \n  // Dataset operations\n  uploadDataset: (formData) => {\n    return apiClient.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n  \n  getDatasetInfo: () => {\n    return apiClient.get('/dataset');\n  },\n  \n  // Model operations\n  getAvailableModels: () => {\n    return apiClient.get('/models');\n  },\n  \n  trainModel: (modelName, epochs = 3, batchSize = 32) => {\n    return apiClient.post('/train', {\n      model: modelName,\n      epochs: epochs,\n      batch_size: batchSize,\n    });\n  },\n  \n  evaluateModel: (modelName) => {\n    return apiClient.post('/evaluate', {\n      model: modelName,\n    });\n  },\n  \n  // Prediction\n  analyzeText: (text, modelName = 'deberta') => {\n    return apiClient.post('/predict', {\n      text: text,\n      model: modelName,\n    });\n  },\n  \n  // Web scraping\n  scrapeWebsite: (url) => {\n    return apiClient.post('/scrape', {\n      url: url,\n    });\n  },\n  \n  // Generate shareable link\n  generateShareableLink: (analysisResult) => {\n    // Generate shareable URL with analysis result data\n    const baseUrl = window.location.origin;\n    const path = '/analyze';\n    \n    // Create parameters for sharing\n    const params = new URLSearchParams();\n    if (analysisResult) {\n      params.append('result', JSON.stringify({\n        prediction: analysisResult.prediction,\n        confidence: analysisResult.confidence,\n        emoji: analysisResult.emoji,\n        emoji_description: analysisResult.emoji_description,\n        model: analysisResult.model\n      }));\n    }\n    \n    return `${baseUrl}${path}?${params.toString()}`;\n  },\n  \n  // Share to social media\n  shareToSocialMedia: (platform, analysisResult) => {\n    const shareableLink = apiService.generateShareableLink(analysisResult);\n    const shareText = `I analyzed this content with Falsehood Filter and found it to be ${analysisResult.prediction === 1 ? 'authentic' : 'false'} information (${analysisResult.emoji_description}) ${analysisResult.emoji}`;\n    \n    let shareUrl = '';\n    \n    switch (platform) {\n      case 'twitter':\n        shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareableLink)}`;\n        break;\n      case 'facebook':\n        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareableLink)}&quote=${encodeURIComponent(shareText)}`;\n        break;\n      case 'linkedin':\n        shareUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(shareableLink)}&title=${encodeURIComponent('Falsehood Filter Analysis')}&summary=${encodeURIComponent(shareText)}`;\n        break;\n      case 'whatsapp':\n        shareUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(`${shareText} ${shareableLink}`)}`;\n        break;\n      case 'email':\n        shareUrl = `mailto:?subject=${encodeURIComponent('Falsehood Filter Analysis')}&body=${encodeURIComponent(`${shareText}\\n\\nCheck it out here: ${shareableLink}`)}`;\n        break;\n      default:\n        return null;\n    }\n    \n    // Open in a new window\n    if (shareUrl) {\n      window.open(shareUrl, '_blank', 'noopener,noreferrer');\n      return true;\n    }\n    \n    return false;\n  },\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}